play.application.loader = com.stey.connect.qtels.impl.QtelsLoader

redis {
  instance {
    host = "dev-redis-01.redis.cache.chinacloudapi.cn"
    password = "yikILBPvBunGKhnS+y+kRrhFb+8rDmVsAtedOBbesHA="
    port = 6379
    database = 3
    host = ${?REDIS_INSTANCE_HOST}
    password = ${?REDIS_INSTANCE_PASSWORD}
  }
}

cassandra {
  keyspace = stey_connect_qtels
  replication-factor = 1
  replication-factor = ${?CASSANDRA_REPLICATION_FACTOR}
}

cassandra-journal {
  keyspace = ${cassandra.keyspace}
  replication-factor = ${cassandra.replication-factor}
}
cassandra-query-journal {
  first-time-bucket = "20191201T00:00"
}
cassandra-snapshot-store {
  keyspace = ${cassandra.keyspace}
  replication-factor = ${cassandra.replication-factor}
}
lagom.persistence.read-side.cassandra {
  keyspace = ${cassandra.keyspace}
  replication-factor = ${cassandra.replication-factor}
}
akka.cluster.sharding.state-store-mode = ddata

db {
  default {
    driver = "com.microsoft.sqlserver.jdbc.SQLServerDriver"
    url = "jdbc:sqlserver://dev-mssql-01.database.chinacloudapi.cn:1433;DatabaseName=dev-stey-01"
    username = "ops"
    password = "SteyTest2018"
    url = ${?SLICK_DB_URL}
    username = ${?SLICK_DB_USER}
    password = ${?SLICK_DB_PASSWORD}
  }
}
jdbc-defaults.slick.profile = "slick.jdbc.SQLServerProfile$"


akka.actor {
  serialization-bindings {
    # Commands won't use play-json but Akka's jackson support.
    # See https://doc.akka.io/docs/akka/2.6/serialization-jackson.html
    "com.stey.connect.qtels.impl.persistence.cassandra.ReservationAggregate$CommandSerializable" = jackson-json
  }
}

stey.connect {
  qtels {
    gateway: "http://116.90.84.47:9090/qtels-local/gateway"
    api-key: steyuatkey
    api-secret: steyuatsecret
    gateway: ${?STEY_CONNECT_QTELS_GATEWAY}
    api-key: ${?STEY_CONNECT_QTELS_API_KEY}
    api-secret: ${?STEY_CONNECT_QTELS_API_SECRET}
    monthly-reservation-rate-codes: "LS"
    monthly-reservation-rate-codes: ${?STEY_CONNECT_QTELS_MONTHLY_RESERVATION_RATE_CODES}
  }
}
